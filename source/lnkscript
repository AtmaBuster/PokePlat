/* Linker Script Original v1.3 by Jeff Frohwein     */
/*  v1.0 - Original release                         */
/*  v1.1 - Added proper .data section support       */
/*  v1.2 - Added support for c++ & iwram overlays   */
/*       - Major contributions by Jason Wilkins.    */
/*  v1.3 - .ewram section now can be used when      */
/*         compiling for MULTIBOOT mode. This fixes */
/*         malloc() in DevKitAdvance which depends  */
/*         on __eheap_start instead of end to define*/
/*         the starting location of heap space.     */
/*         External global variable __gba_iwram_heap*/
/*         support added to allow labels end, _end, */
/*         & __end__ to point to end of iwram or    */
/*         the end of ewram.                        */
/*	Additions by WinterMute				*/
/* v1.4 -	.sbss section added for unitialised	*/
/*		    data in ewram 			*/
/* v1.5 -	padding section added to stop EZF 	*/
/*		    stripping important data		*/

/* This file is released into the public domain		*/
/* for commercial or non-commercial use with no		*/
/* restrictions placed upon it.				*/

/* NOTE!!!: This linker script defines the RAM &  */
/*   ROM start addresses. In order for it to work */
/*   properly, remove -Ttext and -Tbss linker     */
/*   options from your makefile if they are       */
/*   present.                                     */

/* You can use the following to view section      */
/* addresses in your .elf file:                   */
/*   objdump -h file.elf                          */
/* Please note that empty sections may incorrectly*/
/* list the lma address as the vma address for    */
/* some versions of objdump.                      */

OUTPUT_FORMAT("elf32-littlearm", "elf32-bigarm", "elf32-littlearm")
OUTPUT_ARCH(arm)
ENTRY(_start)
/* SEARCH_DIR(/bin/arm); */

/* The linker script function "var1 += var2;" sometimes    */
/* reports incorrect values in the *.map file but the      */
/* actual value it calculates is usually, if not always,   */
/* correct. If you leave out the ". = ALIGN(4);" at the    */
/* end of each section then the return value of SIZEOF()   */
/* is sometimes incorrect and "var1 += var2;" appears to   */
/* not work as well. "var1 += var2" style functions are    */
/* avoided below as a result.                              */

MEMORY {

	rom	: ORIGIN = 0x02000000, LENGTH = 32M
	iwram	: ORIGIN = 0x021d0d80, LENGTH = 8M
	iwram_221f800 : ORIGIN = 0x0221f800, LENGTH = 8M
	iwram_221fc20 : ORIGIN = 0x0221fc20, LENGTH = 8M
	iwram_222ae60 : ORIGIN = 0x0222ae60, LENGTH = 8M
	iwram_222dce0 : ORIGIN = 0x0222dce0, LENGTH = 8M
	iwram_222f2c0 : ORIGIN = 0x0222f2c0, LENGTH = 8M
	iwram_223b140 : ORIGIN = 0x0223b140, LENGTH = 8M
	iwram_223b5a0 : ORIGIN = 0x0223b5a0, LENGTH = 8M
	iwram_223d7a0 : ORIGIN = 0x0223d7a0, LENGTH = 8M
	iwram_223e140 : ORIGIN = 0x0223e140, LENGTH = 8M
	iwram_2241440 : ORIGIN = 0x02241440, LENGTH = 8M
	iwram_2241ae0 : ORIGIN = 0x02241ae0, LENGTH = 8M
	iwram_2246c20 : ORIGIN = 0x02246c20, LENGTH = 8M
	iwram_2249960 : ORIGIN = 0x02249960, LENGTH = 8M
	iwram_2253ce0 : ORIGIN = 0x02253ce0, LENGTH = 8M
	iwram_22561c0 : ORIGIN = 0x022561c0, LENGTH = 8M
	iwram_225c700 : ORIGIN = 0x0225c700, LENGTH = 8M
	iwram_2260440 : ORIGIN = 0x02260440, LENGTH = 8M
	ewram	: ORIGIN = 0x02000000, LENGTH = 8M
	ewram2	: ORIGIN = 0x01ff8000, LENGTH = 8M
}

__text_start	=	ORIGIN(rom);
__eheap_end	=	ORIGIN(ewram) + LENGTH(ewram);
__iwram_start	=	ORIGIN(iwram);
__iwram_top	=	ORIGIN(iwram) + LENGTH(iwram);;
__iwram_221f800_start	=	ORIGIN(iwram_221f800);
__iwram_221f800_top	=	ORIGIN(iwram_221f800) + LENGTH(iwram_221f800);;
__iwram_221fc20_start	=	ORIGIN(iwram_221fc20);
__iwram_221fc20_top	=	ORIGIN(iwram_221fc20) + LENGTH(iwram_221fc20);;
__iwram_222ae60_start	=	ORIGIN(iwram_222ae60);
__iwram_222ae60_top	=	ORIGIN(iwram_222ae60) + LENGTH(iwram_222ae60);;
__iwram_222dce0_start	=	ORIGIN(iwram_222dce0);
__iwram_222dce0_top	=	ORIGIN(iwram_222dce0) + LENGTH(iwram_222dce0);;
__iwram_222f2c0_start	=	ORIGIN(iwram_222f2c0);
__iwram_222f2c0_top	=	ORIGIN(iwram_222f2c0) + LENGTH(iwram_222f2c0);;
__iwram_223b140_start	=	ORIGIN(iwram_223b140);
__iwram_223b140_top	=	ORIGIN(iwram_223b140) + LENGTH(iwram_223b140);;
__iwram_223b5a0_start	=	ORIGIN(iwram_223b5a0);
__iwram_223b5a0_top	=	ORIGIN(iwram_223b5a0) + LENGTH(iwram_223b5a0);;
__iwram_223d7a0_start	=	ORIGIN(iwram_223d7a0);
__iwram_223d7a0_top	=	ORIGIN(iwram_223d7a0) + LENGTH(iwram_223d7a0);;
__iwram_223e140_start	=	ORIGIN(iwram_223e140);
__iwram_223e140_top	=	ORIGIN(iwram_223e140) + LENGTH(iwram_223e140);;
__iwram_2241440_start	=	ORIGIN(iwram_2241440);
__iwram_2241440_top	=	ORIGIN(iwram_2241440) + LENGTH(iwram_2241440);;
__iwram_2241ae0_start	=	ORIGIN(iwram_2241ae0);
__iwram_2241ae0_top	=	ORIGIN(iwram_2241ae0) + LENGTH(iwram_2241ae0);;
__iwram_2246c20_start	=	ORIGIN(iwram_2246c20);
__iwram_2246c20_top	=	ORIGIN(iwram_2246c20) + LENGTH(iwram_2246c20);;
__iwram_2249960_start	=	ORIGIN(iwram_2249960);
__iwram_2249960_top	=	ORIGIN(iwram_2249960) + LENGTH(iwram_2249960);;
__iwram_22561c0_start	=	ORIGIN(iwram_22561c0);
__iwram_22561c0_top	=	ORIGIN(iwram_22561c0) + LENGTH(iwram_22561c0);;
__iwram_225c700_start	=	ORIGIN(iwram_225c700);
__iwram_225c700_top	=	ORIGIN(iwram_225c700) + LENGTH(iwram_225c700);;
__iwram_2260440_start	=	ORIGIN(iwram_2260440);
__iwram_2260440_top	=	ORIGIN(iwram_2260440) + LENGTH(iwram_2260440);;
__sp_irq	=	__iwram_top - 0x060;
__sp_usr	=	__sp_irq - 0x0a0;
__irq_flags	=	0x03007ff8;
__irg_handler = 0x01ff8000;

SECTIONS
{
	. = __text_start;
	.init :
	{
		KEEP (*(.init))
		. = ALIGN(4);
	} >rom =0xff

	.plt :
	{
		*(.plt)
		. = ALIGN(4);   /* REQUIRED. LD is flaky without it. */
	} >rom

	.text  :   /* ALIGN (4): */
	{
/*		*(EXCLUDE_FILE (*.iwram*) .text)
		*(.text .stub .text.* .gnu.linkonce.t.*)
		KEEP (*(.text.*personality*))*/
		/* .gnu.warning sections are handled specially by elf32.em.  */
/*		*(.gnu.warning)
		*(.glue_7t) *(.glue_7) *(.vfp11_veneer)*/
		. = ALIGN(4);  /* REQUIRED. LD is flaky without it. */
	} >rom = 0xff

	__text_end = .;    
	.fini           :
	{
		KEEP (*(.fini))
		. = ALIGN(4);  /* REQUIRED. LD is flaky without it. */
	} >rom =0

	.rodata :
	{
		*(.rodata)
		*all.rodata*(*)
		*(.roda)
		*(.rodata.*)
		*(.gnu.linkonce.r*)
		SORT(CONSTRUCTORS)
		. = ALIGN(4);   /* REQUIRED. LD is flaky without it. */
	} >rom = 0xff
	.ARM.extab   : { *(.ARM.extab* .gnu.linkonce.armextab.*) } >rom
	__exidx_start = .;
	.ARM.exidx   : { *(.ARM.exidx* .gnu.linkonce.armexidx.*) } >rom
	__exidx_end = .;
    
    
    	__ewram_start = ORIGIN(ewram);
        __ewram_lma = __ewram_start;
	.ewram __ewram_start : AT (__ewram_lma)
	{
		*(.ewram)
		/*. = ALIGN(4);   REQUIRED. LD is flaky without it. */
		__ewram_end = ABSOLUTE(.);
	}>ewram = 0xff

	__ewram2_start = 0x2101d20; /*__ewram_lma + SIZEOF(.ewram);*/
	.ewram2 __irg_handler : AT (__ewram2_start)
	{
		*(.ewram2)
		/*. = ALIGN(4);   REQUIRED. LD is flaky without it. */
		__ewram2_end = ABSOLUTE(.);
	}>ewram2 = 0xff

	__ewram3_start = __ewram2_start + SIZEOF(.ewram2);
	.ewram3 __ewram3_start : AT (__ewram3_start)
	{
		*(.ewram3)
		__ewram3_end = ABSOLUTE(.);
	}>ewram = 0xff
    
/*	__ewram3f_start = __ewram3_start + SIZEOF(.ewram3);
	.fill0 __ewram3f_start : AT (__ewram3f_start)
	{
		FILL(0xFF);
		. = . + ((((__ewram3f_start) + 0x200 - 1) & ~(0x200 - 1)) - (__ewram3f_start)) - 1;
	    BYTE(0xFF);
	} > ewram = 0xff*/
    
	/*__pad_lma = __ewram_lma + SIZEOF(.ewram);*/
	__pad_lma = __ewram3_start + SIZEOF(.ewram3);

	.sbss ALIGN(4)(NOLOAD):
 	{
		__sbss_start__ = ABSOLUTE(.);
 		*(.sbss)
 		. = ALIGN(4);
		__sbss_end__  = ABSOLUTE(.);
		__end__ = ABSOLUTE(.);
		__eheap_start = ABSOLUTE(.);
 	} AT>ewram
    

	__iwram_lma = .;

	.bss ALIGN(4) (NOLOAD) :
	{
		__bss_start = ABSOLUTE(.);
		__bss_start__ = ABSOLUTE(.);
		*(.dynbss)
		*(.gnu.linkonce.b*)
		*(.bss*)
		*(COMMON)
		. = ALIGN(4);    /* REQUIRED. LD is flaky without it. */
		__bss_end__ = ABSOLUTE(.);

	}

	.bss2 (0x27e0000) (NOLOAD) :
	{
		__bss2_start = ABSOLUTE(.);
		__bss2_start__ = ABSOLUTE(.);
/*		*(.dynbss)
		*(.gnu.linkonce.b*)*/
		*(.bss2*)
/*		*(COMMON)*/
		. = ALIGN(4);    /* REQUIRED. LD is flaky without it. */
		__bss2_end__ = ABSOLUTE(.);

	}

	.iwram __iwram_start : AT (__iwram_lma)
	{
		__iwram_start__ = ABSOLUTE(.) ;
		*(.iwram)
		*iwram.*(.text)
		. = ALIGN(4);   /* REQUIRED. LD is flaky without it. */
		__iwram_end__ = ABSOLUTE(.) ;
	} >iwram = 0xff

	__data_lma = __iwram_lma + SIZEOF(.iwram);



	.data ALIGN(4) : AT (__data_lma)
	{
		__data_start__ = ABSOLUTE(.);
		*(.data)
		*(.data.*)
		*(.gnu.linkonce.d*)
		CONSTRUCTORS
		. = ALIGN(4);
	} >iwram = 0xff

	__preinit_lma = __data_lma + SIZEOF(.data);

	.preinit_array ALIGN(4)    : AT (__preinit_lma)
	{
		__preinit_array_start = ABSOLUTE(.);
		KEEP (*(.preinit_array))
		__preinit_array_end = ABSOLUTE(.);
	} >iwram

	__init_lma = __preinit_lma + SIZEOF(.preinit_array);

	.init_array  ALIGN(4)   : AT (__init_lma)
	{
		__init_array_start = ABSOLUTE(.);
		KEEP (*(SORT(.init_array.*)))
		KEEP (*(.init_array))
		__init_array_end = ABSOLUTE(.);
	} >iwram

	__fini_lma = __init_lma + SIZEOF(.init_array);

	.fini_array  ALIGN(4)   : AT (__fini_lma)
	{
		__fini_array_start = ABSOLUTE(.);
		KEEP (*(SORT(.fini_array.*)))
		KEEP (*(.fini_array))
  		__fini_array_end = ABSOLUTE(.);
	} >iwram

	__jcr_lma = __fini_lma + SIZEOF(.fini_array);
	.jcr        ALIGN(4)    : AT (__jcr_lma) { KEEP (*(.jcr)) } >iwram

	__data_end__  =  ABSOLUTE(.);

    
	__iwram_223e140_lma = .;

	.iwram_223e140 __iwram_223e140_start : AT (__iwram_223e140_lma)
	{
		__iwram_223e140_start__ = ABSOLUTE(.) ;
		*(.iwram_223e140)
		*iwram_223e140.*(.text)
		. = ALIGN(4);   /* REQUIRED. LD is flaky without it. */
		__iwram_223e140_end__ = ABSOLUTE(.) ;
	} >iwram_223e140 = 0xff

	__data_lma_iwram_223e140 = __iwram_223e140_lma + SIZEOF(.iwram_223e140);
    

	.iwram4 __iwram_start : AT (__iwram_overlay_lma) { *(.iwram4) . = ALIGN(4); } > iwram = 0xff
	__load_start_iwram2 = LOADADDR (.iwram4);
	__load_stop_iwram2 = LOADADDR (.iwram4) + SIZEOF (.iwram4);
	.fill4 :
	{
		FILL(0xFF);
		/*. = . + ((__load_start_iwram2 + (__load_stop_iwram2 - __load_start_iwram2)) + 0x200 - 1) & ~(0x200 - 1) - (__load_start_iwram2 + (__load_stop_iwram2 - __load_start_iwram2));*/
		. = . + ((((__load_stop_iwram2) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram2)) - 1;
		/*. = . + 0x180;*/
	    BYTE(0xFF);
	} > iwram = 0xff
    
	.iwram5 __iwram_start : AT (__iwram_overlay_lma + SIZEOF (.iwram4) + SIZEOF (.fill4)) { *(.iwram5) . = ALIGN(4); } > iwram = 0xff
	__load_start_iwram3 = LOADADDR (.iwram5);
	__load_stop_iwram3 = LOADADDR (.iwram5) + SIZEOF (.iwram5);
	.fill5 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram3) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram3)) - 1;
	    BYTE(0xFF);
	} > iwram = 0xff
    
	__iwram_overlay_lma = __jcr_lma + SIZEOF(.jcr);

	__iwram_overlay_start = . ;
    
	.iwram6 __iwram_223e140_start : AT (__iwram_overlay_lma + SIZEOF (.iwram4) + SIZEOF (.fill4) + SIZEOF (.iwram5) + SIZEOF (.fill5)) { *(.iwram6) . = ALIGN(4); } > iwram_223e140 = 0xff
	__load_start_iwram6 = LOADADDR (.iwram6);
	__load_stop_iwram6 = LOADADDR (.iwram6) + SIZEOF (.iwram6);
	.fill6 :
	{
/*		FILL(0xFF);
        offset = MAX(0x200, -1);
		. = . + 0;
	    BYTE(0xFF);*/
	} > iwram_223e140 = 0xff
    
    temp7 = __iwram_overlay_lma + SIZEOF (.iwram4) + SIZEOF (.fill4) + SIZEOF (.iwram5) + SIZEOF (.fill5) + SIZEOF (.iwram6) + SIZEOF (.fill6);
	.iwram7 __iwram_2249960_start : AT (temp7) { *(.iwram7) . = ALIGN(4); } > iwram_2249960 = 0xff
	__load_start_iwram7 = LOADADDR (.iwram7);
	__load_stop_iwram7 = LOADADDR (.iwram7) + SIZEOF (.iwram7);
	.fill7 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram7) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram7)) - 1;
	    BYTE(0xFF);
	} > iwram_2249960 = 0xff
    
    temp8 = temp7 + SIZEOF (.iwram7) + SIZEOF (.fill7);
	.iwram8 __iwram_2249960_start : AT (temp8) { *(.iwram8) . = ALIGN(4); } > iwram_2249960 = 0xff
	__load_start_iwram8 = LOADADDR (.iwram8);
	__load_stop_iwram8 = LOADADDR (.iwram8) + SIZEOF (.iwram8);
	.fill8 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram8) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram8)) - 1;
	    BYTE(0xFF);
	} > iwram_2249960 = 0xff
    
    temp9 = temp8 + SIZEOF (.iwram8) + SIZEOF (.fill8);
	.iwram9 __iwram_2249960_start : AT (temp9) { *(.iwram9) . = ALIGN(4); } > iwram_2249960 = 0xff
	__load_start_iwram9 = LOADADDR (.iwram9);
	__load_stop_iwram9 = LOADADDR (.iwram9) + SIZEOF (.iwram9);
	.fill9 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram9) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram9)) - 1;
	    BYTE(0xFF);
	} > iwram_2249960 = 0xff
    
    temp10 = temp9 + SIZEOF (.iwram9) + SIZEOF (.fill9);
	.iwram10 __iwram_2249960_start : AT (temp10) { *(.iwram10) . = ALIGN(4); } > iwram_2249960 = 0xff
	__load_start_iwram10 = LOADADDR (.iwram10);
	__load_stop_iwram10 = LOADADDR (.iwram10) + SIZEOF (.iwram10);
	.fill10 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram10) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram10)) - 1;
	    BYTE(0xFF);
	} > iwram_2249960 = 0xff
    
    temp11 = temp10 + SIZEOF (.iwram10) + SIZEOF (.fill10);
	.iwram11 __iwram_2249960_start : AT (temp11) { *(.iwram11) . = ALIGN(4); } > iwram_2249960 = 0xff
	__load_start_iwram11 = LOADADDR (.iwram11);
	__load_stop_iwram11 = LOADADDR (.iwram11) + SIZEOF (.iwram11);
	.fill11 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram11) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram11)) - 1;
	    BYTE(0xFF);
	} > iwram_2249960 = 0xff
    
    temp12 = temp11 + SIZEOF (.iwram11) + SIZEOF (.fill11);
	.iwram12 __iwram_221fc20_start : AT (temp12) { *(.iwram12) . = ALIGN(4); } > iwram_221fc20 = 0xff
	__load_start_iwram12 = LOADADDR (.iwram12);
	__load_stop_iwram12 = LOADADDR (.iwram12) + SIZEOF (.iwram12);
	.fill12 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram12) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram12)) - 1;
	    BYTE(0xFF);
	} > iwram_221fc20 = 0xff
    
    temp13 = temp12 + SIZEOF (.iwram12) + SIZEOF (.fill12);
	.iwram13 __iwram_221fc20_start : AT (temp13) { *(.iwram13) . = ALIGN(4); } > iwram_221fc20 = 0xff
	__load_start_iwram13 = LOADADDR (.iwram13);
	__load_stop_iwram13 = LOADADDR (.iwram13) + SIZEOF (.iwram13);
    
    temp14 = temp13 + SIZEOF (.iwram13);
	.iwram14 __iwram_221fc20_start : AT (temp14) { *(.iwram14) . = ALIGN(4); } > iwram_221fc20 = 0xff
	__load_start_iwram14 = LOADADDR (.iwram14);
	__load_stop_iwram14 = LOADADDR (.iwram14) + SIZEOF (.iwram14);
	.fill14 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram14) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram14)) - 1;
	    BYTE(0xFF);
	} > iwram_221fc20 = 0xff
    
    temp15 = temp14 + SIZEOF (.iwram14) + SIZEOF (.fill14);
	.iwram15 __iwram_start : AT (temp15) { *(.iwram15) . = ALIGN(4); } > iwram = 0xff
	__load_start_iwram15 = LOADADDR (.iwram15);
	__load_stop_iwram15 = LOADADDR (.iwram15) + SIZEOF (.iwram15);
	.fill15 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram15) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram15)) - 1;
	    BYTE(0xFF);
	} > iwram = 0xff
    
    temp16 = temp15 + SIZEOF (.iwram15) + SIZEOF (.fill15);
	.iwram16 __iwram_223b140_start : AT (temp16) { *(.iwram16) . = ALIGN(4); } > iwram_223b140 = 0xff
	__load_start_iwram16 = LOADADDR (.iwram16);
	__load_stop_iwram16 = LOADADDR (.iwram16) + SIZEOF (.iwram16);
	.fill16 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram16) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram16)) - 1;
	    BYTE(0xFF);
	} > iwram_223b140 = 0xff
    
    temp17 = temp16 + SIZEOF (.iwram16) + SIZEOF (.fill16);
	.iwram17 __iwram_223b140_start : AT (temp17) { *(.iwram17) . = ALIGN(4); } > iwram_223b140 = 0xff
	__load_start_iwram17 = LOADADDR (.iwram17);
	__load_stop_iwram17 = LOADADDR (.iwram17) + SIZEOF (.iwram17);
	.fill17 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram17) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram17)) - 1;
	    BYTE(0xFF);
	} > iwram_223b140 = 0xff
    
    temp18 = temp17 + SIZEOF (.iwram17) + SIZEOF (.fill17);
	.iwram18 __iwram_221f800_start : AT (temp18) { *(.iwram18) . = ALIGN(4); } > iwram_221f800 = 0xff
	__load_start_iwram18 = LOADADDR (.iwram18);
	__load_stop_iwram18 = LOADADDR (.iwram18) + SIZEOF (.iwram18);
	.fill18 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram18) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram18)) - 1;
	    BYTE(0xFF);
	} > iwram_221f800 = 0xff
    
    temp19 = temp18 + SIZEOF (.iwram18) + SIZEOF (.fill18);
	.iwram19 __iwram_221fc20_start : AT (temp19) { *(.iwram19) . = ALIGN(4); } > iwram_221fc20 = 0xff
	__load_start_iwram19 = LOADADDR (.iwram19);
	__load_stop_iwram19 = LOADADDR (.iwram19) + SIZEOF (.iwram19);
	.fill19 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram19) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram19)) - 1;
	    BYTE(0xFF);
	} > iwram_221fc20 = 0xff
    
    temp20 = temp19 + SIZEOF (.iwram19) + SIZEOF (.fill19);
	.iwram20 __iwram_221fc20_start : AT (temp20) { *(.iwram20) . = ALIGN(4); } > iwram_221fc20 = 0xff
	__load_start_iwram20 = LOADADDR (.iwram20);
	__load_stop_iwram20 = LOADADDR (.iwram20) + SIZEOF (.iwram20);
	.fill20 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram20) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram20)) - 1;
	    BYTE(0xFF);
	} > iwram_221fc20 = 0xff
    
    temp21 = temp20 + SIZEOF (.iwram20) + SIZEOF (.fill20);
	.iwram21 __iwram_start : AT (temp21) { *(.iwram21) . = ALIGN(4); } > iwram = 0xff
	__load_start_iwram21 = LOADADDR (.iwram21);
	__load_stop_iwram21 = LOADADDR (.iwram21) + SIZEOF (.iwram21);
	.fill21 :
	{
/*		FILL(0xFF);
		. = . + ((((__load_stop_iwram21) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram21)) - 1;
	    BYTE(0xFF);*/
	} > iwram = 0xff
    
    temp22 = temp21 + SIZEOF (.iwram21) + SIZEOF (.fill21);
	.iwram22 __iwram_221fc20_start : AT (temp22) { *(.iwram22) . = ALIGN(4); } > iwram_221fc20 = 0xff
	__load_start_iwram22 = LOADADDR (.iwram22);
	__load_stop_iwram22 = LOADADDR (.iwram22) + SIZEOF (.iwram22);
	.fill22 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram22) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram22)) - 1;
	    BYTE(0xFF);
	} > iwram_221fc20 = 0xff
    
    temp23 = temp22 + SIZEOF (.iwram22) + SIZEOF (.fill22);
	.iwram23 __iwram_221fc20_start : AT (temp23) { *(.iwram23) . = ALIGN(4); } > iwram_221fc20 = 0xff
	__load_start_iwram23 = LOADADDR (.iwram23);
	__load_stop_iwram23 = LOADADDR (.iwram23) + SIZEOF (.iwram23);
	.fill23 :
	{
/*		FILL(0xFF);
		. = . + ((((__load_stop_iwram23) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram23)) - 1;
	    BYTE(0xFF);*/
	} > iwram_221fc20 = 0xff
    
    temp24 = temp23 + SIZEOF (.iwram23) + SIZEOF (.fill23);
	.iwram24 __iwram_221fc20_start : AT (temp24) { *(.iwram24) . = ALIGN(4); } > iwram_221fc20 = 0xff
	__load_start_iwram24 = LOADADDR (.iwram24);
	__load_stop_iwram24 = LOADADDR (.iwram24) + SIZEOF (.iwram24);
	.fill24 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram24) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram24)) - 1;
	    BYTE(0xFF);
	} > iwram_221fc20 = 0xff
    
    temp25 = temp24 + SIZEOF (.iwram24) + SIZEOF (.fill24);
	.iwram25 __iwram_221fc20_start : AT (temp25) { *(.iwram25) . = ALIGN(4); } > iwram_221fc20 = 0xff
	__load_start_iwram25 = LOADADDR (.iwram25);
	__load_stop_iwram25 = LOADADDR (.iwram25) + SIZEOF (.iwram25);
	.fill25 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram25) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram25)) - 1;
	    BYTE(0xFF);
	} > iwram_221fc20 = 0xff
    
    temp26 = temp25 + SIZEOF (.iwram25) + SIZEOF (.fill25);
	.iwram26 __iwram_22561c0_start : AT (temp26) { *(.iwram26) . = ALIGN(4); } > iwram_22561c0 = 0xff
	__load_start_iwram26 = LOADADDR (.iwram26);
	__load_stop_iwram26 = LOADADDR (.iwram26) + SIZEOF (.iwram26);
	.fill26 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram26) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram26)) - 1;
	    BYTE(0xFF);
	} > iwram_22561c0 = 0xff
    
    temp27 = temp26 + SIZEOF (.iwram26) + SIZEOF (.fill26);
	.iwram27 __iwram_22561c0_start : AT (temp27) { *(.iwram27) . = ALIGN(4); } > iwram_22561c0 = 0xff
	__load_start_iwram27 = LOADADDR (.iwram27);
	__load_stop_iwram27 = LOADADDR (.iwram27) + SIZEOF (.iwram27);
	.fill27 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram27) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram27)) - 1;
	    BYTE(0xFF);
	} > iwram_22561c0 = 0xff
    
    temp28 = temp27 + SIZEOF (.iwram27) + SIZEOF (.fill27);
	.iwram28 __iwram_22561c0_start : AT (temp28) { *(.iwram28) . = ALIGN(4); } > iwram_22561c0 = 0xff
	__load_start_iwram28 = LOADADDR (.iwram28);
	__load_stop_iwram28 = LOADADDR (.iwram28) + SIZEOF (.iwram28);
	.fill28 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram28) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram28)) - 1;
	    BYTE(0xFF);
	} > iwram_22561c0 = 0xff
    
    temp29 = temp28 + SIZEOF (.iwram28) + SIZEOF (.fill28);
	.iwram29 __iwram_22561c0_start : AT (temp29) { *(.iwram29) . = ALIGN(4); } > iwram_22561c0 = 0xff
	__load_start_iwram29 = LOADADDR (.iwram29);
	__load_stop_iwram29 = LOADADDR (.iwram29) + SIZEOF (.iwram29);
	.fill29 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram29) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram29)) - 1;
	    BYTE(0xFF);
	} > iwram_22561c0 = 0xff
    
    temp30 = temp29 + SIZEOF (.iwram29) + SIZEOF (.fill29);
	.iwram30 __iwram_22561c0_start : AT (temp30) { *(.iwram30) . = ALIGN(4); } > iwram_22561c0 = 0xff
	__load_start_iwram30 = LOADADDR (.iwram30);
	__load_stop_iwram30 = LOADADDR (.iwram30) + SIZEOF (.iwram30);
	.fill30 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram30) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram30)) - 1;
	    BYTE(0xFF);
	} > iwram_22561c0 = 0xff
    
    temp31 = temp30 + SIZEOF (.iwram30) + SIZEOF (.fill30);
	.iwram31 __iwram_22561c0_start : AT (temp31) { *(.iwram31) . = ALIGN(4); } > iwram_22561c0 = 0xff
	__load_start_iwram31 = LOADADDR (.iwram31);
	__load_stop_iwram31 = LOADADDR (.iwram31) + SIZEOF (.iwram31);
	.fill31 :
	{
	} > iwram_22561c0 = 0xff
    
    temp32 = temp31 + SIZEOF (.iwram31) + SIZEOF (.fill31);
	.iwram32 __iwram_22561c0_start : AT (temp32) { *(.iwram32) . = ALIGN(4); } > iwram_22561c0 = 0xff
	__load_start_iwram32 = LOADADDR (.iwram32);
	__load_stop_iwram32 = LOADADDR (.iwram32) + SIZEOF (.iwram32);
	.fill32 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram32) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram32)) - 1;
	    BYTE(0xFF);
	} > iwram_22561c0 = 0xff
    
    temp33 = temp32 + SIZEOF (.iwram32) + SIZEOF (.fill32);
	.iwram33 __iwram_22561c0_start : AT (temp33) { *(.iwram33) . = ALIGN(4); } > iwram_22561c0 = 0xff
	__load_start_iwram33 = LOADADDR (.iwram33);
	__load_stop_iwram33 = LOADADDR (.iwram33) + SIZEOF (.iwram33);
	.fill33 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram33) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram33)) - 1;
	    BYTE(0xFF);
	} > iwram_22561c0 = 0xff
    
    temp34 = temp33 + SIZEOF (.iwram33) + SIZEOF (.fill33);
	.iwram34 __iwram_22561c0_start : AT (temp34) { *(.iwram34) . = ALIGN(4); } > iwram_22561c0 = 0xff
	__load_start_iwram34 = LOADADDR (.iwram34);
	__load_stop_iwram34 = LOADADDR (.iwram34) + SIZEOF (.iwram34);
	.fill34 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram34) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram34)) - 1;
	    BYTE(0xFF);
	} > iwram_22561c0 = 0xff
    
    temp35 = temp34 + SIZEOF (.iwram34) + SIZEOF (.fill34);
	.iwram35 __iwram_22561c0_start : AT (temp35) { *(.iwram35) . = ALIGN(4); } > iwram_22561c0 = 0xff
	__load_start_iwram35 = LOADADDR (.iwram35);
	__load_stop_iwram35 = LOADADDR (.iwram35) + SIZEOF (.iwram35);
	.fill35 :
	{
	} > iwram_22561c0 = 0xff
    
    temp36 = temp35 + SIZEOF (.iwram35) + SIZEOF (.fill35);
	.iwram36 __iwram_22561c0_start : AT (temp36) { *(.iwram36) . = ALIGN(4); } > iwram_22561c0 = 0xff
	__load_start_iwram36 = LOADADDR (.iwram36);
	__load_stop_iwram36 = LOADADDR (.iwram36) + SIZEOF (.iwram36);
	.fill36 :
	{
	} > iwram_22561c0 = 0xff
    
    temp37 = temp36 + SIZEOF (.iwram36) + SIZEOF (.fill36);
	.iwram37 __iwram_22561c0_start : AT (temp37) { *(.iwram37) . = ALIGN(4); } > iwram_22561c0 = 0xff
	__load_start_iwram37 = LOADADDR (.iwram37);
	__load_stop_iwram37 = LOADADDR (.iwram37) + SIZEOF (.iwram37);
	.fill37 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram37) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram37)) - 1;
	    BYTE(0xFF);
	} > iwram_22561c0 = 0xff
    
    temp38 = temp37 + SIZEOF (.iwram37) + SIZEOF (.fill37);
	.iwram38 __iwram_22561c0_start : AT (temp38) { *(.iwram38) . = ALIGN(4); } > iwram_22561c0 = 0xff
	__load_start_iwram38 = LOADADDR (.iwram38);
	__load_stop_iwram38 = LOADADDR (.iwram38) + SIZEOF (.iwram38);
	.fill38 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram38) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram38)) - 1;
	    BYTE(0xFF);
	} > iwram_22561c0 = 0xff
    
    temp39 = temp38 + SIZEOF (.iwram38) + SIZEOF (.fill38);
	.iwram39 __iwram_22561c0_start : AT (temp39) { *(.iwram39) . = ALIGN(4); } > iwram_22561c0 = 0xff
	__load_start_iwram39 = LOADADDR (.iwram39);
	__load_stop_iwram39 = LOADADDR (.iwram39) + SIZEOF (.iwram39);
	.fill39 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram39) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram39)) - 1;
	    BYTE(0xFF);
	} > iwram_22561c0 = 0xff
    
    temp40 = temp39 + SIZEOF (.iwram39) + SIZEOF (.fill39);
	.iwram40 __iwram_22561c0_start : AT (temp40) { *(.iwram40) . = ALIGN(4); } > iwram_22561c0 = 0xff
	__load_start_iwram40 = LOADADDR (.iwram40);
	__load_stop_iwram40 = LOADADDR (.iwram40) + SIZEOF (.iwram40);
	.fill40 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram40) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram40)) - 1;
	    BYTE(0xFF);
	} > iwram_22561c0 = 0xff
    
    temp41 = temp40 + SIZEOF (.iwram40) + SIZEOF (.fill40);
	.iwram41 __iwram_22561c0_start : AT (temp41) { *(.iwram41) . = ALIGN(4); } > iwram_22561c0 = 0xff
	__load_start_iwram41 = LOADADDR (.iwram41);
	__load_stop_iwram41 = LOADADDR (.iwram41) + SIZEOF (.iwram41);
	.fill41 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram41) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram41)) - 1;
	    BYTE(0xFF);
	} > iwram_22561c0 = 0xff
    
    temp42 = temp41 + SIZEOF (.iwram41) + SIZEOF (.fill41);
	.iwram42 __iwram_22561c0_start : AT (temp42) { *(.iwram42) . = ALIGN(4); } > iwram_22561c0 = 0xff
	__load_start_iwram42 = LOADADDR (.iwram42);
	__load_stop_iwram42 = LOADADDR (.iwram42) + SIZEOF (.iwram42);
	.fill42 :
	{
		FILL(0xFFFF);
		. = . + ((((__load_stop_iwram42) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram42)) - 1;
	    BYTE(0xFF);
	} > iwram_22561c0 = 0xff
    
    temp43 = temp42 + SIZEOF (.iwram42) + SIZEOF (.fill42);
	.iwram43 __iwram_22561c0_start : AT (temp43) { *(.iwram43) . = ALIGN(4); } > iwram_22561c0 = 0xff
	__load_start_iwram43 = LOADADDR (.iwram43);
	__load_stop_iwram43 = LOADADDR (.iwram43) + SIZEOF (.iwram43);
	.fill43 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram43) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram43)) - 1;
	    BYTE(0xFF);
	} > iwram_22561c0 = 0xff
    
    temp44 = temp43 + SIZEOF (.iwram43) + SIZEOF (.fill43);
	.iwram44 __iwram_22561c0_start : AT (temp44) { *(.iwram44) . = ALIGN(4); } > iwram_22561c0 = 0xff
	__load_start_iwram44 = LOADADDR (.iwram44);
	__load_stop_iwram44 = LOADADDR (.iwram44) + SIZEOF (.iwram44);
	.fill44 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram44) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram44)) - 1;
	    BYTE(0xFF);
	} > iwram_22561c0 = 0xff
    
    temp45 = temp44 + SIZEOF (.iwram44) + SIZEOF (.fill44);
	.iwram45 __iwram_22561c0_start : AT (temp45) { *(.iwram45) . = ALIGN(4); } > iwram_22561c0 = 0xff
	__load_start_iwram45 = LOADADDR (.iwram45);
	__load_stop_iwram45 = LOADADDR (.iwram45) + SIZEOF (.iwram45);
	.fill45 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram45) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram45)) - 1;
	    BYTE(0xFF);
	} > iwram_22561c0 = 0xff
    
    temp46 = temp45 + SIZEOF (.iwram45) + SIZEOF (.fill45);
	.iwram46 __iwram_22561c0_start : AT (temp46) { *(.iwram46) . = ALIGN(4); } > iwram_22561c0 = 0xff
	__load_start_iwram46 = LOADADDR (.iwram46);
	__load_stop_iwram46 = LOADADDR (.iwram46) + SIZEOF (.iwram46);
	.fill46 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram46) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram46)) - 1;
	    BYTE(0xFF);
	} > iwram_22561c0 = 0xff
    
    temp47 = temp46 + SIZEOF (.iwram46) + SIZEOF (.fill46);
	.iwram47 __iwram_22561c0_start : AT (temp47) { *(.iwram47) . = ALIGN(4); } > iwram_22561c0 = 0xff
	__load_start_iwram47 = LOADADDR (.iwram47);
	__load_stop_iwram47 = LOADADDR (.iwram47) + SIZEOF (.iwram47);
	.fill47 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram47) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram47)) - 1;
	    BYTE(0xFF);
	} > iwram_22561c0 = 0xff
    
    temp48 = temp47 + SIZEOF (.iwram47) + SIZEOF (.fill47);
	.iwram48 __iwram_22561c0_start : AT (temp48) { *(.iwram48) . = ALIGN(4); } > iwram_22561c0 = 0xff
	__load_start_iwram48 = LOADADDR (.iwram48);
	__load_stop_iwram48 = LOADADDR (.iwram48) + SIZEOF (.iwram48);
	.fill48 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram48) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram48)) - 1;
	    BYTE(0xFF);
	} > iwram_22561c0 = 0xff
    
    temp49 = temp48 + SIZEOF (.iwram48) + SIZEOF (.fill48);
	.iwram49 __iwram_22561c0_start : AT (temp49) { *(.iwram49) . = ALIGN(4); } > iwram_22561c0 = 0xff
	__load_start_iwram49 = LOADADDR (.iwram49);
	__load_stop_iwram49 = LOADADDR (.iwram49) + SIZEOF (.iwram49);
	.fill49 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram49) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram49)) - 1;
	    BYTE(0xFF);
	} > iwram_22561c0 = 0xff
    
    temp50 = temp49 + SIZEOF (.iwram49) + SIZEOF (.fill49);
	.iwram50 __iwram_22561c0_start : AT (temp50) { *(.iwram50) . = ALIGN(4); } > iwram_22561c0 = 0xff
	__load_start_iwram50 = LOADADDR (.iwram50);
	__load_stop_iwram50 = LOADADDR (.iwram50) + SIZEOF (.iwram50);
	.fill50 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram50) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram50)) - 1;
	    BYTE(0xFF);
	} > iwram_22561c0 = 0xff
    
    temp51 = temp50 + SIZEOF (.iwram50) + SIZEOF (.fill50);
	.iwram51 __iwram_22561c0_start : AT (temp51) { *(.iwram51) . = ALIGN(4); } > iwram_22561c0 = 0xff
	__load_start_iwram51 = LOADADDR (.iwram51);
	__load_stop_iwram51 = LOADADDR (.iwram51) + SIZEOF (.iwram51);
	.fill51 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram51) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram51)) - 1;
	    BYTE(0xFF);
	} > iwram_22561c0 = 0xff
    
    temp52 = temp51 + SIZEOF (.iwram51) + SIZEOF (.fill51);
	.iwram52 __iwram_22561c0_start : AT (temp52) { *(.iwram52) . = ALIGN(4); } > iwram_22561c0 = 0xff
	__load_start_iwram52 = LOADADDR (.iwram52);
	__load_stop_iwram52 = LOADADDR (.iwram52) + SIZEOF (.iwram52);
	.fill52 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram52) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram52)) - 1;
	    BYTE(0xFF);
	} > iwram_22561c0 = 0xff
    
    temp53 = temp52 + SIZEOF (.iwram52) + SIZEOF (.fill52);
	.iwram53 __iwram_22561c0_start : AT (temp53) { *(.iwram53) . = ALIGN(4); } > iwram_22561c0 = 0xff
	__load_start_iwram53 = LOADADDR (.iwram53);
	__load_stop_iwram53 = LOADADDR (.iwram53) + SIZEOF (.iwram53);
	.fill53 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram53) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram53)) - 1;
	    BYTE(0xFF);
	} > iwram_22561c0 = 0xff
    
    temp54 = temp53 + SIZEOF (.iwram53) + SIZEOF (.fill53);
	.iwram54 __iwram_22561c0_start : AT (temp54) { *(.iwram54) . = ALIGN(4); } > iwram_22561c0 = 0xff
	__load_start_iwram54 = LOADADDR (.iwram54);
	__load_stop_iwram54 = LOADADDR (.iwram54) + SIZEOF (.iwram54);
	.fill54 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram54) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram54)) - 1;
	    BYTE(0xFF);
	} > iwram_22561c0 = 0xff
    
    temp55 = temp54 + SIZEOF (.iwram54) + SIZEOF (.fill54);
	.iwram55 __iwram_22561c0_start : AT (temp55) { *(.iwram55) . = ALIGN(4); } > iwram_22561c0 = 0xff
	__load_start_iwram55 = LOADADDR (.iwram55);
	__load_stop_iwram55 = LOADADDR (.iwram55) + SIZEOF (.iwram55);
	.fill55 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram55) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram55)) - 1;
	    BYTE(0xFF);
	} > iwram_22561c0 = 0xff
    
    temp56 = temp55 + SIZEOF (.iwram55) + SIZEOF (.fill55);
	.iwram56 __iwram_22561c0_start : AT (temp56) { *(.iwram56) . = ALIGN(4); } > iwram_22561c0 = 0xff
	__load_start_iwram56 = LOADADDR (.iwram56);
	__load_stop_iwram56 = LOADADDR (.iwram56) + SIZEOF (.iwram56);
	.fill56 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram56) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram56)) - 1;
	    BYTE(0xFF);
	} > iwram_22561c0 = 0xff
    
    temp57 = temp56 + SIZEOF (.iwram56) + SIZEOF (.fill56);
	.iwram57 __iwram_start : AT (temp57) { *(.iwram57) . = ALIGN(4); } > iwram = 0xff
	__load_start_iwram57 = LOADADDR (.iwram57);
	__load_stop_iwram57 = LOADADDR (.iwram57) + SIZEOF (.iwram57);
	.fill57 :
	{
/*		FILL(0xFF);
		. = . + ((((__load_stop_iwram57) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram57)) - 1;
	    BYTE(0xFF);*/
	} > iwram = 0xff
    
    temp58 = temp57 + SIZEOF (.iwram57) + SIZEOF (.fill57);
	.iwram58 __iwram_start : AT (temp58) { *(.iwram58) . = ALIGN(4); } > iwram = 0xff
	__load_start_iwram58 = LOADADDR (.iwram58);
	__load_stop_iwram58 = LOADADDR (.iwram58) + SIZEOF (.iwram58);
	.fill58 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram58) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram58)) - 1;
	    BYTE(0xFF);
	} > iwram = 0xff
    
    temp59 = temp58 + SIZEOF (.iwram58) + SIZEOF (.fill58);
	.iwram59 __iwram_start : AT (temp59) { *(.iwram59) . = ALIGN(4); } > iwram = 0xff
	__load_start_iwram59 = LOADADDR (.iwram59);
	__load_stop_iwram59 = LOADADDR (.iwram59) + SIZEOF (.iwram59);
	.fill59 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram59) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram59)) - 1;
	    BYTE(0xFF);
	} > iwram = 0xff
    
    temp60 = temp59 + SIZEOF (.iwram59) + SIZEOF (.fill59);
	.iwram60 __iwram_221f800_start : AT (temp60) { *(.iwram60) . = ALIGN(4); } > iwram_221f800 = 0xff
	__load_start_iwram60 = LOADADDR (.iwram60);
	__load_stop_iwram60 = LOADADDR (.iwram60) + SIZEOF (.iwram60);
	.fill60 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram60) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram60)) - 1;
	    BYTE(0xFF);
	} > iwram_221f800 = 0xff
    
    temp61 = temp60 + SIZEOF (.iwram60) + SIZEOF (.fill60);
	.iwram61 __iwram_222ae60_start : AT (temp61) { *(.iwram61) . = ALIGN(4); } > iwram_222ae60 = 0xff
	__load_start_iwram61 = LOADADDR (.iwram61);
	__load_stop_iwram61 = LOADADDR (.iwram61) + SIZEOF (.iwram61);
	.fill61 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram61) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram61)) - 1;
	    BYTE(0xFF);
	} > iwram_222ae60 = 0xff
    
    temp62 = temp61 + SIZEOF (.iwram61) + SIZEOF (.fill61);
	.iwram62 __iwram_222f2c0_start : AT (temp62) { *(.iwram62) . = ALIGN(4); } > iwram_222f2c0 = 0xff
	__load_start_iwram62 = LOADADDR (.iwram62);
	__load_stop_iwram62 = LOADADDR (.iwram62) + SIZEOF (.iwram62);
	.fill62 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram62) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram62)) - 1;
	    BYTE(0xFF);
	} > iwram_222f2c0 = 0xff
    
    temp63 = temp62 + SIZEOF (.iwram62) + SIZEOF (.fill62);
	.iwram63 __iwram_222ae60_start : AT (temp63) { *(.iwram63) . = ALIGN(4); } > iwram_222ae60 = 0xff
	__load_start_iwram63 = LOADADDR (.iwram63);
	__load_stop_iwram63 = LOADADDR (.iwram63) + SIZEOF (.iwram63);
	.fill63 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram63) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram63)) - 1;
	    BYTE(0xFF);
	} > iwram_222ae60 = 0xff
    
    temp64 = temp63 + SIZEOF (.iwram63) + SIZEOF (.fill63);
	.iwram64 __iwram_222dce0_start : AT (temp64) { *(.iwram64) . = ALIGN(4); } > iwram_222dce0 = 0xff
	__load_start_iwram64 = LOADADDR (.iwram64);
	__load_stop_iwram64 = LOADADDR (.iwram64) + SIZEOF (.iwram64);
	.fill64 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram64) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram64)) - 1;
	    BYTE(0xFF);
	} > iwram_222dce0 = 0xff
    
    temp65 = temp64 + SIZEOF (.iwram64) + SIZEOF (.fill64);
	.iwram65 __iwram_222dce0_start : AT (temp65) { *(.iwram65) . = ALIGN(4); } > iwram_222dce0 = 0xff
	__load_start_iwram65 = LOADADDR (.iwram65);
	__load_stop_iwram65 = LOADADDR (.iwram65) + SIZEOF (.iwram65);
	.fill65 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram65) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram65)) - 1;
	    BYTE(0xFF);
	} > iwram_222dce0 = 0xff
    
    temp66 = temp65 + SIZEOF (.iwram65) + SIZEOF (.fill65);
	.iwram66 __iwram_222dce0_start : AT (temp66) { *(.iwram66) . = ALIGN(4); } > iwram_222dce0 = 0xff
	__load_start_iwram66 = LOADADDR (.iwram66);
	__load_stop_iwram66 = LOADADDR (.iwram66) + SIZEOF (.iwram66);
	.fill66 :
	{
		FILL(0xFF);
		. = . + ((((__load_stop_iwram66) + 0x200 - 1) & ~(0x200 - 1)) - (__load_stop_iwram66)) - 1;
	    BYTE(0xFF);
	} > iwram_222dce0 = 0xff
    
    
	. = __iwram_overlay_lma + MAX (SIZEOF (.iwram4), SIZEOF (.iwram5));

/*	OVERLAY ALIGN(4) : NOCROSSREFS AT (__iwram_overlay_lma)
	{
		.iwram0 { *(.iwram0) . = ALIGN(4);}
		.iwram1 { *(.iwram1) . = ALIGN(4);}*/
		/*.iwram4 { *(.iwram4) . = ALIGN(4);}*/
        /*test = ABSOLUTE(.);*/
/*		.fill2
		{
		FILL(0xFF);
		. = ((LOADADDR (.iwram4) + SIZEOF (.iwram4)) + 0x200 - 1) & ~(0x200 - 1) - (LOADADDR (.iwram4) + SIZEOF (.iwram4));
		}*/
		/*.iwram5 { *(.iwram5) . = ALIGN(0x200);}
		.iwram4 { *(.iwram4) . = ALIGN(4);}
		.iwram5 { *(.iwram5) . = ALIGN(4);}
		.iwram6 { *(.iwram6) . = ALIGN(4);}
		.iwram7 { *(.iwram7) . = ALIGN(4);}
		.iwram8 { *(.iwram8) . = ALIGN(4);}
		.iwram9 { *(.iwram9) . = ALIGN(4);}
	}>iwram = 0xff*/
  
/*	__iwram_overlay_end1 = ABSOLUTE(.);
	.fill3 :
	{
	FILL(0xFF);
	. = . + ((__iwram_overlay_lma + (__iwram_overlay_end1 - __iwram_overlay_start)) + 0x200 - 1) & ~(0x200 - 1) - (__iwram_overlay_lma + (__iwram_overlay_end1 - __iwram_overlay_start));
    BYTE(0xAA);
	} > iwram = 0xff*/

	__iwram_overlay_end = . ;

	/*__iwram_overlay_end = . ;*/
	/*__iwram_overlay_end = . + (((LOADADDR (.iwram5) + SIZEOF (.iwram5)) + 0x200 - 1) & ~(0x200 - 1)) - (LOADADDR (.iwram5) + SIZEOF (.iwram5));*/
	__ewram_lma = __iwram_overlay_lma + (__iwram_overlay_end - __iwram_overlay_start) ;

	__iheap_start = . ;



	/* EZF Advance strips trailing 0xff bytes, add a pad section so nothing important is removed */
/*	.pad ALIGN(4) : AT (__pad_lma)
	{
		LONG(0x52416b64)
		LONG(0x4d)
		. = ALIGN(4);
	} = 0xff
	__rom_end__ = __pad_lma + SIZEOF(.pad);*/
	__rom_end__ = __pad_lma;


	/* Stabs debugging sections.  */
/*	.stab 0 : { *(.stab) }
	.stabstr 0 : { *(.stabstr) }
	.stab.excl 0 : { *(.stab.excl) }
	.stab.exclstr 0 : { *(.stab.exclstr) }
	.stab.index 0 : { *(.stab.index) }
	.stab.indexstr 0 : { *(.stab.indexstr) }
	.comment 0 : { *(.comment) }*/
	/*	DWARF debug sections.
		Symbols in the DWARF debugging sections are relative to the beginning
		of the section so we begin them at 0.  */
	/* DWARF 1 */
/*	.debug          0 : { *(.debug) }
	.line           0 : { *(.line) }*/
	/* GNU DWARF 1 extensions */
/*	.debug_srcinfo  0 : { *(.debug_srcinfo) }
	.debug_sfnames  0 : { *(.debug_sfnames) }*/
	/* DWARF 1.1 and DWARF 2 */
/*	.debug_aranges  0 : { *(.debug_aranges) }
	.debug_pubnames 0 : { *(.debug_pubnames) }*/
	/* DWARF 2 */
/*	.debug_info     0 : { *(.debug_info) }
	.debug_abbrev   0 : { *(.debug_abbrev) }
	.debug_line     0 : { *(.debug_line) }
	.debug_frame    0 : { *(.debug_frame) }
	.debug_str      0 : { *(.debug_str) }
	.debug_loc      0 : { *(.debug_loc) }
	.debug_macinfo  0 : { *(.debug_macinfo) }*/
	/* SGI/MIPS DWARF 2 extensions */
/*	.debug_weaknames 0 : { *(.debug_weaknames) }
	.debug_funcnames 0 : { *(.debug_funcnames) }
	.debug_typenames 0 : { *(.debug_typenames) }
	.debug_varnames  0 : { *(.debug_varnames) }
	.stack 0x80000 : { _stack = .; *(.stack) }*/
	/* These must appear regardless of  .  */
/*  .note.gnu.arm.ident 0 : { KEEP (*(.note.gnu.arm.ident)) }
  .ARM.attributes 0 : { KEEP (*(.ARM.attributes)) }
  /DISCARD/ : { *(.note.GNU-stack) }*/
}
